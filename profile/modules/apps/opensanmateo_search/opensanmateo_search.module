<?php
/**
 * @file
 * Code for the OpenSanMateo Search feature.
 */

include_once 'opensanmateo_search.features.inc';
include_once 'opensanmateo_search.features.field_instance_do_not_index.inc';
include_once 'opensanmateo_search.features.field_instance_qs.inc';

/**
 * Implements hook_search_api_query_alter().
 * 
 * Restricts the search results to the content types selected in the app
 */
/*
function opensanmateo_search_search_api_query_alter($query) {
  $types = array_filter(variable_get('opesanmateo_search_content_types_to_index', array()));
  $exclude_types = array_diff(array_map(function($i) {return $i->type;}, node_type_get_types()), $types);
  
  $filter = $query->createFilter('AND');
  foreach ($exclude_types as $type) {
    $filter->condition('type', $type, '<>');
  }
  $query->filter($filter);
}
*/
function opensanmateo_search_search_api_index_items_alter(array &$items, SearchApiIndex $index) {
  $types = array_filter(variable_get('opesanmateo_search_content_types_to_index', array()));
  foreach($items as $id => $item) {
    if (!in_array($item->type, $types)) {
      unset($items[$id]);
    }
    elseif ($item->field_do_not_index[$item->language][0]['value']){
      unset($items[$id]);
    }
  }
  
}

/**
 * This is the quick serach callback that we used for finding our quick search links
 */
function opensanmateo_search_qs_callback($search) {
  /**
   * This is how one could use a view to pull this data.  One might want to do that if
   * the conditions for the search get kind of crazy
   *
  $view = views_get_view('opensanmateo_quick_search');
  $view->set_arguments(array($search));
  $view->pre_execute();
  $view->execute();
  foreach($view->result as $result) {
    $item = $result->_entity_properties;
    $rtn[] = l($item['title'], $item['url']);
  }
  */

  $results =  search_api_query('san_mateo_quick_search_index')->keys($search)->execute();
  $rtn = array();
  foreach($results['results'] as $result) {
    $item = $result['fields'];
    $rtn[] = l($item['title'], $item['url']);
  }
  return $rtn;
}


/**
 *  Implementation of hook_form_alter().
 *  
 *  Here we set a quick search callback on our search field
 */
function quick_search_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    $form['search_api_views_fulltext']['#pre_render'][] = 'quick_search_process_search';
    $form['search_api_views_fulltext']['#attributes']['quick_search_callback'] = 'opensanmateo_search_qs_callback';
}
