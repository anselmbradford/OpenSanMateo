<?php
/**
 * @file
 * Code for the OpenSanMateo Crawler feature.
 */

include_once 'opensanmateo_crawler.features.inc';


function opensanmateo_crawler_menu() {
  $items['osm-crawler-list/%node'] = array(
    'title arguments' => array(1),
    
    // The page callback also invokes drupal_set_title() in case
    // the menu router's title is overridden by a menu link.
    'page callback' => 'opensanmateo_crawler_list',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
  );
  return $items;
}
function opensanmateo_crawler_list($node) {
  echo "url\n";

// Now, create a instance of your class, define the behaviour
// of the crawler (see class-reference for more options and details)
// and start the crawling-process. 

$crawler = new MyCrawler();

// URL to crawl
$crawler->setURL("e2thex.org");
$crawler->sitenid = $node->nid;

// Only receive content of files with content-type "text/html"
$crawler->addContentTypeReceiveRule("#text/html#");

// Ignore links to pictures, dont even request pictures
$crawler->addURLFilterRule("#\.(jpg|jpeg|gif|png|css|js)$# i");

// Store and send cookie-data like a browser does
$crawler->enableCookieHandling(true);

// Set the traffic-limit to 1 MB (in bytes,
// for testing we dont want to "suck" the whole site)
$crawler->setTrafficLimit(1000 * 1024);
$crawler->setpageLimit(25);

// Thats enough, now here we go
$crawler->go();

// At the end, after the process is finished, we print a short
// report (see method getProcessReport() for more information)
$report = $crawler->getProcessReport();
print_r($crawler->urls);

if (PHP_SAPI == "cli") $lb = "\n";
else $lb = "<br />";
    
  exit;
}

// It may take a whils to crawl a site ...
set_time_limit(10000);

// Inculde the phpcrawl-mainclass
include("PHPCrawl_082/libs/PHPCrawler.class.php");

// Extend the class and override the handleDocumentInfo()-method 
class MyCrawler extends PHPCrawler 
{
  public $sitenid;
  function handleDocumentInfo($DocInfo) 
  {
    // Just detect linebreak for output ("\n" in CLI-mode, otherwise "<br>").
    if (PHP_SAPI == "cli") $lb = "\n";
    else $lb = "<br />";

    // Print the URL and the HTTP-status-Code
   # echo "Page requested: ".$DocInfo->url." (".$DocInfo->http_status_code.")".$lb;
    
    // Print the refering URL
    #echo "Referer-page: ".$DocInfo->referer_url.$lb;
    
    // Print if the content of the document was be recieved or not
    #if ($DocInfo->received == true)
     # echo "Content received: ".$DocInfo->bytes_received." bytes".$lb;
    #else
      #echo "Content not received".$lb; 
    
    // Now you should do something with the content of the actual
    // received page or file ($DocInfo->source), we skip it in this example 
   echo $DocInfo->url. "\n";
   $this->url = $DocInfo->url;
   $this->createNode($DocInfo->url);
    
    #echo $lb;
    
    flush();
  } 
  public function createNode($url) {
    $node = new stdClass();
    $node->type = 'external_page';
    node_object_prepare($node);
   
    $node->title    = $url;
    $node->language = LANGUAGE_NONE;

    $node->field_external_url[$node->language][0]['url']  = $url;
    $node->field_external_site[$node->language][0]['nid']  = $this->sitenid;
   
    node_save($node); 
    $fsource = feeds_source("opensanmateo_crawler",$node->nid);
    $fconfig = $fsource->getConfig();
    dpm($fconfig, "b");
    $fconfig["FeedsHTTPFetcher"]["source"] = $url;
    $fsource->setConfig($fconfig);
    dpm($fconfig, "after");
    $fsource->save();

  }
}

function opensanmateo_crawler_node_view_alter($node) {
  dpm($node['#node']);
  $s = feeds_source("opensanmateo_crawler", 2);
  dpm($s->getConfig());
}

